<?php

/**
 * @file
 * The ACK node module.
 */

/**
 * Implements hook_access_info().
 */
function ack_node_access_info() {
  // Declare support for controlling access to nodes.
  $info['node'] = array('label' => t('Content'));
  return $info;
}

/**
 * Implements hook_access_handler_info().
 */
function ack_node_access_handler_info() {
  // Handlers for node properties.
  $info['ACKNodeAuthor'] = array(
    'label' => t('Author'),
    'scheme types' => array('user'),
    'object types' => array('node'),
  );
  $info['ACKNodeSticky'] = array(
    'label' => t('Sticky'),
    'scheme types' => array('boolean'),
    'object types' => array('node'),
  );

  // Handler for the taxonomy index.
  if (module_exists('taxonomy')) {
    $info['ACKNodeTaxonomyIndex'] = array(
      'label' => t('Term association'),
      'scheme types' => array('taxonomy_term'),
      'object types' => array('node'),
    );
  }

  return $info;
}

/**
 * Implements hook_permission().
 */
function ack_node_permission() {
  // Create ACK-enabled create/edit/delete permissions for each content type.
  $perms = array();
  $scheme_names = access_object_schemes('node', TRUE);
  $t_args = array('%schemes' => implode(', ', $scheme_names));
  foreach (node_permissions_get_configured_types() as $type) {
    $type_info = node_type_get_type($type);
    $t_args['%type'] = $type_info->name;
    $perms += array(
      "ack create $type content" => array(
        'title' => t('%type: Create new content in assigned access realms', $t_args),
        'description' => t('This permission only applies to the following access schemes: %schemes.', $t_args),
      ),
      "ack edit own $type content" => array(
        'title' => t('%type: Edit own content in assigned access realms', $t_args),
        'description' => t('This permission only applies to the following access schemes: %schemes.', $t_args),
      ),
      "ack edit any $type content" => array(
        'title' => t('%type: Edit any content in assigned access realms', $t_args),
        'description' => t('This permission only applies to the following access schemes: %schemes.', $t_args),
      ),
      "ack delete own $type content" => array(
        'title' => t('%type: Delete own content in assigned access realms', $t_args),
        'description' => t('This permission only applies to the following access schemes: %schemes.', $t_args),
      ),
      "ack delete any $type content" => array(
        'title' => t('%type: Delete any content in assigned access realms', $t_args),
        'description' => t('This permission only applies to the following access schemes: %schemes.', $t_args),
      ),
    );
  }
  return $perms;
}

/**
 * Implements hook_node_access().
 */
function ack_node_node_access($node, $op, $account) {
  $type = is_string($node) ? $node : $node->type;

  if (in_array($type, node_permissions_get_configured_types())) {
    if ($op == 'create' && user_access('ack create ' . $type . ' content', $account)) {
      return NODE_ACCESS_ALLOW;
    }

    if ($op == 'update') {
      if (access_user_object_access('ack edit any ' . $type . ' content', 'node', $node, $account) || (access_user_object_access('ack edit own ' . $type . ' content', 'node', $node, $account) && ($account->uid == $node->uid))) {
        return NODE_ACCESS_ALLOW;
      }
    }

    if ($op == 'delete') {
      if (access_user_object_access('ack delete any ' . $type . ' content', 'node', $node, $account) || (access_user_object_access('ack delete own ' . $type . ' content', 'node', $node, $account) && ($account->uid == $node->uid))) {
        return NODE_ACCESS_ALLOW;
      }
    }
  }

  // Returning nothing from this function would have the same effect.
  return NODE_ACCESS_IGNORE;
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 *
 * Alters the node form to filter the options on ACK-related elements.
 */
function ack_node_form_node_form_alter(&$form, &$form_state, $form_id) {
  global $user;
  $node = $form_state['node'];
  $schemes = access_object_schemes('node');

  // Check whether the user has global permission to create/edit this node type,
  // which trumps any of our ACK permissions.
  if (empty($node->nid)) {
    $global = user_access('create ' . $node->type . ' content');
    if (!$global) {
      // Get the list of realms in which the user can create this type of node.
      $realms = access_user_permission_realms('ack create ' . $node->type . ' content', $user, $schemes);
    }
  }
  else {
    $global = (user_access('edit any ' . $node->type . ' content') || (user_access('edit own ' . $node->type . ' content') && ($user->uid == $node->uid)));
  }

  // If no global access, filter the form.
  if (!$global) {
    foreach ($schemes as $scheme) {
      if (empty($node->nid)) {
        $scheme->handlers['node']->objectFormAlter('node', $node, $form, $form_state, $form_id, $realms[$scheme->machine_name]);
      }
      else {
        $scheme->handlers['node']->objectFormAlter('node', $node, $form, $form_state, $form_id);
      }
    }
  }
}
