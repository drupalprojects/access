<?php

/**
 * @file
 * The ACK menu module.
 */

/**
 * Implements hook_access_info().
 */
function ack_menu_access_info() {
  // Declare support for controlling access to menu links.
  $info['menu_link'] = array('label' => t('Menu link'));
  return $info;
}

/**
 * Implements hook_access_handler_info().
 */
function ack_menu_access_handler_info() {
  // To keep URLs sane on management pages, only allow integer-based schemes.
  // Integers also make link-to-realm mapping much easier and more searchable.
  $integer_schemes = array();
  foreach (access_scheme_info() as $scheme_info) {
    if ($scheme_info['data_type'] == 'integer') {
      $integer_schemes[] = $scheme_info['type'];
    }
  }

  $info = array();
  // Handler to map menu links to realms.
  $info['AckMenuMap'] = array(
    'label' => t('Administratively assigned'),
    'scheme types' => $integer_schemes,
    'object types' => array('menu_link'),
  );
  // @todo Support access to a menu item based on the node it links to?
  return $info;
}

/**
 * Implements hook_permission().
 */
function ack_menu_permission() {
  $scheme_names = access_object_schemes('menu_link', TRUE);
  $t_args = array('%schemes' => implode(', ', $scheme_names));
  return array(
    'ack manage menu links' => array(
      'title' => t('Manage menu links in assigned access realms'),
      'description' => t('This permission only applies to the following access schemes: %schemes.', $t_args),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function ack_menu_menu() {
  $items['ack_menu'] = array(
    'title' => 'Manage menu links',
    'description' => 'Add, edit, and rearrange links for menu trees that you are permitted to manage.',
    'page callback' => 'ack_menu_overview_page',
    'access arguments' => array('ack manage menu links'),
    'menu_name' => 'navigation',
    'file' => 'ack_menu.pages.inc',
  );
  $items['ack_menu/list'] = array(
    'title' => 'List manageable links',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );
  $items['ack_menu/manage/%access_scheme_machine_name/%'] = array(
    'title' => 'Manage realm links',
    'title callback' => 'ack_menu_overview_title',
    'title arguments' => array(2, 3),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ack_menu_overview_form', 2, 3),
    'access callback' => 'ack_menu_access',
    'access arguments' => array(2, 3),
    'file' => 'ack_menu.pages.inc',
  );
  $items['ack_menu/manage/%access_scheme_machine_name/%/list'] = array(
    'title' => 'List links',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );
  $items['ack_menu/manage/%access_scheme_machine_name/%/add'] = array(
    'title' => 'Add realm link',
    'page callback' => 'ack_menu_link_add',
    'page arguments' => array(2, 3),
    'access callback' => 'ack_menu_access',
    'access arguments' => array(2, 3),
    'type' => MENU_LOCAL_ACTION,
    'file' => 'ack_menu.pages.inc',
  );
  return $items;
}

/**
 * Implements hook_menu_alter().
 */
function ack_menu_menu_alter(&$items) {
  // Override access to menu link operations.
  foreach (array('edit', 'reset', 'delete') as $op) {
    $items['admin/structure/menu/item/%menu_link/' . $op]['access callback'] = 'ack_menu_link_access';
    $items['admin/structure/menu/item/%menu_link/' . $op]['access arguments'] = array(4);
  }
}

/**
 * Menu title callback for the "manage realm links" page.
 *
 * @param object $scheme
 *   An access scheme.
 * @param int $realm
 *   A realm value.
 *
 * @return string
 *   The translated page title.
 */
function ack_menu_overview_title($scheme, $realm) {
  return t('Manage menu links for @realm', array('@realm' => $scheme->realms[$realm]));
}

/**
 * Access callback for managing realm links.
 *
 * @param object $scheme
 *   An access scheme.
 * @param int $realm
 *   A realm value.
 * @param object $account
 *   (optional) A user account. Defaults to the currently logged-in user.
 *
 * @return bool
 *   TRUE if the user account has access to manage links in the given realm.
 */
function ack_menu_access($scheme, $realm, $account = NULL) {
  global $user;
  if (!isset($account)) {
    $account = $user;
  }
  // Validate the scheme.
  if (isset($scheme->handlers['menu_link'])) {
    // Validate the realm value.
    if (is_numeric($realm) && isset($scheme->realms[$realm])) {
      // The global 'administer menu' permission trumps any ACK permissions.
      if (user_access('administer menu', $account)) {
        return TRUE;
      }
      // Check realm permissions and that manageable links exist.
      $links = $scheme->handlers['menu_link']->realmLinks($realm);
      if (!empty($links) && user_access('ack manage menu links', $account)) {
        $allowed_realms = access_user_permission_realms('ack manage menu links', $account, array($scheme));
        if (in_array($realm, $allowed_realms[$scheme->machine_name])) {
          return TRUE;
        }
      }
    }
  }
  return FALSE;
}

/**
 * Access callback for editing, resetting or deleting a menu link.
 *
 * @param array $menu_link
 *   The menu link.
 * @param object $account
 *   (optional) A user account. Defaults to the currently logged-in user.
 *
 * @return bool
 *   Boolean indicating whether the user can change the link.
 */
function ack_menu_link_access($menu_link, $account = NULL) {
  global $user;
  if (!isset($account)) {
    $account = $user;
  }
  // The global 'administer menu' permission trumps any ACK permissions.
  if (user_access('administer menu', $account)) {
    return TRUE;
  }
  // Check realm permissions.
  return access_user_object_access('ack manage menu links', 'menu_link', $menu_link, $account);
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Alters the menu item add/edit form.
 */
function ack_menu_form_menu_edit_item_alter(&$form, &$form_state, $form_id) {
  $item = $form['original_item']['#value'];
  _ack_menu_form_alter($form, $form_state, $form_id, $item);
  $form['#validate'][] = 'ack_menu_form_menu_edit_item_validate';
  $form['#submit'][] = 'ack_menu_form_menu_edit_item_submit';
}

/**
 * Validation handler for the altered menu item form.
 *
 * @see ack_menu_form_menu_edit_item_alter()
 */
function ack_menu_form_menu_edit_item_validate($form, &$form_state) {
  $item = $form_state['values'];
  foreach ($form_state['ack_menu']['schemes'] as $scheme) {
    $scheme->handlers['menu_link']->objectFormValidate('menu_link', $item, $form, $form_state);
  }
}

/**
 * Submit handler for the altered menu item form.
 *
 * @see ack_menu_form_menu_edit_item_alter()
 */
function ack_menu_form_menu_edit_item_submit($form, &$form_state) {
  $item = $form_state['values'];
  foreach ($form_state['ack_menu']['schemes'] as $scheme) {
    $scheme->handlers['menu_link']->objectFormSubmit('menu_link', $item, $form, $form_state);
  }
  if (isset($form_state['ack_menu']['destination'])) {
    $form_state['redirect'] = $form_state['ack_menu']['destination'];
  }
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 *
 * Alters the menu options on the node form.
 */
function ack_menu_form_node_form_alter(&$form, &$form_state, $form_id) {
  // Only alter the menu options on the node if the user would not have access
  // normally, but may have access through ACK.
  if (!empty($form['menu']) && !$form['menu']['#access'] && user_access('ack manage menu links')) {
    $link = $form['#node']->menu;
    // If the link exists, see if the user is allowed to manage it.
    if (!empty($link['mlid'])) {
      $access = ack_menu_link_access($link);
    }
    else {
      // Check for realm-level access to create a link.
      $access = FALSE;
      $realms = access_user_permission_realms('ack manage menu links');
      $schemes = array_keys($realms);
      while (!$access && $scheme_machine_name = array_pop($schemes)) {
        $scheme = access_scheme_machine_name_load($scheme_machine_name);
        if (!empty($scheme)) {
          while (!$access && $realm = array_pop($realms[$scheme_machine_name])) {
            $access = ack_menu_access($scheme, $realm);
          }
        }
      }
    }
    // If the user was granted access above, filter the parent link options.
    if ($access) {
      _ack_menu_form_alter($form['menu']['link'], $form_state, $form_id, $link);
      // If, after filtering, there are no eligible parent items, this indicates
      // that the user's manageable menu links are not in any of the menus that
      // the content type is configured to allow. Thus, we deny access.
      $form['menu']['#access'] = $access && !empty($form['menu']['link']['parent']['#options']);
    }
  }
}

/**
 * Helper function for altering the menu item and node forms.
 *
 * @param array &$form
 *   A form structure representing a menu item. Must have 'parent' and 'weight'
 *   element children.
 * @param array &$form_state
 *   The form state. If 'ack_menu' is already defined in the array, it must
 *   contain 'schemes' and 'realms' values, defining (respectively) the schemes
 *   that can manage the link and the realms that the user can assign to it.
 * @param string $form_id
 *   The form identifier.
 * @param array $link
 *   The menu link represented by the form.
 *
 * @see ack_menu_form_menu_edit_item_alter()
 * @see ack_menu_form_node_form_alter()
 */
function _ack_menu_form_alter(&$form, &$form_state, $form_id, $link) {
  // Place ack_menu values in the form state for use by the handlers.
  if (!isset($form_state['ack_menu'])) {
    $form_state['ack_menu'] = array(
      'schemes' => access_object_schemes('menu_link'),
      'realms' => access_user_permission_realms('ack manage menu links'),
    );
  }
  $schemes = $form_state['ack_menu']['schemes'];
  $realms = $form_state['ack_menu']['realms'];

  // Tell the handler whether the user has global 'administer menu' permission.
  $form_state['ack_menu']['admin'] = user_access('administer menu');

  // Apply AckMenuHandlerInterface::objectFormAlter() for all schemes.
  foreach ($schemes as $scheme) {
    if (empty($link['mlid'])) {
      // A new link can be added to any allowed realm.
      $scheme_realms = isset($realms[$scheme->machine_name]) ? $realms[$scheme->machine_name] : array();
    }
    else {
      // An existing link must stay in its current realm.
      $scheme_realms = NULL;
    }
    $scheme->handlers['menu_link']->objectFormAlter('menu_link', $link, $form, $form_state, $form_id, $scheme_realms);
  }

  // If this link's current parent is not manageable by the user, then the user
  // should not be able to change this link's position, since that would
  // effectively be rearranging the parent's menu tree.
  if (!empty($link['mlid']) && !empty($link['plid'])) {
    $parent = menu_link_load($link['plid']);
    if (!empty($parent)) {
      $form['weight']['#disabled'] = !ack_menu_link_access($parent);
    }
  }
}

/**
 * Implements hook_menu_link_delete().
 */
function ack_menu_menu_link_delete($link) {
  db_delete('ack_menu_map')
    ->condition('mlid', $link['mlid'])
    ->execute();
}

/**
 * Implements hook_access_scheme_delete().
 */
function ack_menu_access_scheme_delete($scheme) {
  db_delete('ack_menu_map')
    ->condition('scheme', $scheme->machine_name)
    ->execute();
}
