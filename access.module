<?php
/**
 * @file
 * The access control kit module.
 */

/**
 * Implements hook_entity_info().
 */
function access_entity_info() {
  // Access grants.
  $types['access_grant'] = array(
    'label' => t('Access grant'),
    'base table' => 'access_grant',
    'uri callback' => 'access_grant_uri',
    'label callback' => 'access_grant_label',
    'fieldable' => TRUE,
    'entity keys' => array(
      'id' => 'gid',
      'bundle' => 'scheme',
    ),
    'bundle keys' => array(
      'bundle' => 'scheme',
    ),
    'bundles' => array(),
    'view modes' => array(
      'full' => array(
        'label' => t('Access grant page'),
        'custom settings' => FALSE,
      ),
    ),
  );

  // Bundles are access schemes; some fields represent conditions for
  // determining which objects are accessible to a user via an access grant.
  foreach (access_scheme_get_names() as $scheme => $name) {
    $types['access_grant']['bundles'][$scheme] = array(
      'label' => $name,
      'admin' => array(
        'path' => 'admin/structure/access/manage/%access_scheme',
        'real path' => 'admin/structure/access/manage/' . str_replace('_', '-', $scheme),
        'bundle argument' => 4,
        'access arguments' => array('administer access schemes'),
      ),
    );
  }

  return $types;
}

/**
 * Entity URI callback for an access grant.
 */
function access_grant_uri($grant) {
  return array('path' => 'admin/access/grant/' . $grant->gid);
}

/**
 * Entity label callback for an access grant.
 */
function access_grant_label($grant, $scheme) {
  return '@todo';
}

/**
 * Implements hook_field_extra_fields().
 */
function access_field_extra_fields() {
  $extra = array();
  $fields = array(
    'user' => array(
      'label' => t('User'),
      'description' => t('Access control kit user reference'),
      'weight'=> -5,
    ),
    'role' => array(
      'label' => t('Role'),
      'description' => t('Access control kit role reference'),
      'weight' => -4,
    ),
  );

  foreach (access_scheme_get_names() as $scheme => $name) {
    $extra['access_grant'][$scheme] = array(
      'form' => $fields,
      'display' => $fields,
    );
  }

  return $extra;
}

/**
 * Loads an access grant from the database.
 *
 * @param $gid
 *   The grant ID.
 * @param $reset
 *   Whether to reset the internal cache.
 *
 * @return
 *   An access grant object, or FALSE if the grant is not found.
 */
function access_grant_load($gid = NULL, $reset = FALSE) {
  $gids = isset($gid) ? array($gid) : array();
  $grant = access_grant_load_multiple($gids, $reset);
  return $grant ? reset($grant) : FALSE;
}

/**
 * Loads access grants from the database.
 *
 * Rather than accepting the deprecated $conditions parameter, as entity_load()
 * does, this function instead enforces the new preferred approach of using
 * EntityFieldQuery to get a list of grant IDs before calling this function.
 *
 * @param $gids
 *   An array of grant IDs, or FALSE to load all grants.
 * @param $reset
 *   Whether to reset the internal cache.
 *
 * @return
 *   An array of access grant objects indexed by their IDs. When no results
 *   are found, an empty array is returned.
 *
 * @see entity_load()
 * @see EntityFieldQuery
 */
function access_grant_load_multiple($gids = FALSE, $reset = FALSE) {
  return entity_load('access_grant', $gids, array(), $reset);
}

/**
 * Menu title callback for an access grant.
 */
function access_grant_page_title($grant) {
  return '@todo';
}

/**
 * Menu title callback for adding a grant within a scheme.
 */
function access_grant_add_page_title($scheme) {
  return t('Grant access by @name', array('@name' => $scheme->name));
}

/**
 * Sets the default values for an access scheme.
 *
 * @param $info
 *   An object or array containing values to override the defaults.
 *
 * @return
 *   An access scheme object.
 */
function access_scheme_set_defaults($info = array()) {
  $info = (array) $info;
  $new_scheme = $info + array(
    'scheme' => '',
    'name' => '',
    'type' => '',
    'description' => '',
  );
  $new_scheme = (object) $new_scheme;
  return $new_scheme;
}

/**
 * Returns a list of all defined access scheme names.
 *
 * @return
 *   An array of scheme names, keyed by machine name.
 */
function access_scheme_get_names() {
  return db_query('SELECT scheme, name FROM {access_scheme} ORDER BY scheme')->fetchAllKeyed();
}

/**
 * Returns a list of all defined access schemes.
 *
 * @return
 *   An array of access scheme objects, keyed by machine name.
 */
function access_scheme_get_schemes() {
  return db_query('SELECT * FROM {access_scheme} ORDER BY scheme')->fetchAllAssoc('scheme');
}

/**
 * Returns the scheme for a given access grant.
 *
 * @param $grant
 *   An access grant object, or an access scheme machine name string.
 *
 * @return
 *   A single access scheme object, or FALSE if not found.
 */
function access_scheme_get_scheme($grant) {
  $scheme = is_object($grant) ? $grant->scheme : $grant;
  return db_query('SELECT * FROM {access_scheme} WHERE scheme = :scheme', array(':scheme' => $scheme))->fetchObject();
}

/**
 * Returns a list of all available access scheme types.
 *
 * @param $format
 *   A string specifying how to return the scheme type data. Allowed values are
 *   'types' (the default), 'list', 'grouped', and 'modules'.
 *
 * @return
 *   Depends on the value of $format as follows:
 *   - 'types': an array as defined by hook_access_info().
 *   - 'list': an array where each key is a scheme type machine name and each
 *     value is the scheme type label.
 *   - 'grouped': a nested array where the outer keys are the types' groups, and
 *     the inner keys and values are as in the 'list' format.
 *   - 'modules': an array where each key is a scheme type machine name and each
 *     value is the module responsible for that scheme type.
 *
 * @see hook_access_info()
 */
function access_scheme_get_types($format = 'types') {
  switch ($format) {
    case 'types':
      $types = array();
      foreach (module_implements('access_info') as $module) {
        $info = module_invoke($module, 'access_info');
        // Add the owning module to the data retrieved from hook_access_info().
        foreach (array_keys($info) as $key) {
          $info[$key]['module'] = $module;
        }
        $types += $info;
      }
      return $types;

    case 'list':
      $list = array();
      foreach (module_invoke_all('access_info') as $key => $type) {
        $list[$key] = filter_xss_admin($type['label']);
      }
      asort($list);
      return $list;

    case 'grouped':
      $grouped = array();
      foreach (module_invoke_all('access_info') as $key => $type) {
        $group = isset($type['group']) ? check_plain($type['group']) : t('Other');
        $grouped[$group][$key] = filter_xss_admin($type['label']);
      }
      foreach (array_keys($grouped) as $group) {
        asort($grouped[$group]);
      }
      ksort($grouped);
      return $grouped;

    case 'modules':
      $modules = array();
      foreach (module_implements('access_info') as $module) {
        foreach (module_invoke($module, 'access_info') as $key => $type) {
          $modules[$key] = $module;
        }
      }
      return $modules;
  }
}

/**
 * Loads an access scheme by machine name.
 *
 * @param $scheme
 *   The machine-readable name of a scheme, where '_' is replaced with '-'.
 *
 * @return
 *   An access scheme object, or FALSE if $scheme does not exist.
 */
function access_scheme_load($scheme) {
  return access_scheme_get_scheme(strtr($scheme, array('-' => '_')));
}

/**
 * Saves an access scheme to the database.
 *
 * @param $info
 *   The access scheme to save, as an object.
 *
 * @return
 *   Status flag indicating the outcome of the database operation.
 */
function access_scheme_save($info) {
  // Check whether this is a new scheme or an update of an existing one.
  $existing_scheme = !empty($info->old_scheme) ? $info->old_scheme : $info->scheme;
  $is_existing = (bool) db_query_range('SELECT 1 FROM {access_scheme} WHERE scheme = :scheme', 0, 1, array(':scheme' => $existing_scheme))->fetchField();

  // Set the field values for the insert/update query.
  $scheme = access_scheme_set_defaults($info);
  $fields = array(
    'scheme' => (string) $scheme->scheme,
    'name' => (string) $scheme->name,
    'type' => (string) $scheme->type,
    'description' => (string) $scheme->description,
  );

  if ($is_existing) {
    db_update('access_scheme')
      ->fields($fields)
      ->condition('scheme', $existing_scheme)
      ->execute();
    $status = SAVED_UPDATED;

    // If the machine name was changed, we need to notify the Field API.
    if (!empty($scheme->old_scheme) && $scheme->old_scheme != $scheme->scheme) {
      field_attach_rename_bundle('access_grant', $scheme->old_scheme, $scheme->scheme);
    }

    // Allow other modules to react to the change.
    module_invoke_all('access_scheme_update', $scheme);
  }
  else {
    db_insert('access_scheme')
      ->fields($fields)
      ->execute();
    $status = SAVED_NEW;

    // Notify the Field API of the new bundle.
    field_attach_create_bundle('access_grant', $scheme->scheme);

    // Allow other modules to react to the new scheme definition.
    module_invoke_all('access_scheme_insert', $scheme);
  }

  return $status;
}

/**
 * Deletes an access scheme from the database.
 *
 * @param $scheme
 *   The machine-readable name of the access scheme to be deleted.
 */
function access_scheme_delete($scheme) {
  $info = access_scheme_get_scheme($scheme);
  db_delete('access_scheme')
    ->condition('scheme', $scheme)
    ->execute();
  // Notify the Field API and other interested modules of the deletion.
  field_attach_delete_bundle('access_grant', $scheme);
  module_invoke_all('access_scheme_delete', $info);
}

/**
 * Implements hook_access_scheme_insert().
 */
function access_access_scheme_insert($scheme) {
  // Create an access field for the scheme.
  $types = access_scheme_get_types();
  if (isset($scheme->type) && isset($types[$scheme->type])) {
    $info = $types[$scheme->type];
    $field_type = 'access_' . $info['type'];
    $field_name = 'ack_' . $scheme->scheme;

    // Make sure the field type is supported.
    $supported_types = access_field_info();
    if (!isset($supported_types[$field_type])) {
      return;
    }

    // Create the field.
    $field = field_info_field($field_name);
    if (empty($field)) {
      $field = array(
        'field_name' => $field_name,
        'type' => $field_type,
        'entity_types' => array('access_grant'),
        'cardinality' => -1,
        'locked' => TRUE,
        'settings' => array(
          'boundary module' => $info['module'],
          'boundary type' => $scheme->type,
          'boundary arguments' => array(),
        ),
      );
      $field = field_create_field($field);
    }

    // Create the instance.
    $instance = field_info_instance('access_grant', $field_name, $scheme->scheme);
    if (empty($instance)) {
      $instance = array(
        'field_name' => $field_name,
        'entity_type' => 'access_grant',
        'bundle' => $scheme->scheme,
        'label' => t('Grant access to'),
        'description' => t('Limit application of the role to these areas of the site.'),
        'required' => TRUE,
      );
      $instance = field_create_instance($instance);
    }
  }
}

/**
 * Implements hook_access_scheme_update().
 */
function access_access_scheme_update($scheme) {
  // If the machine name was changed, we need to update the scheme's grants.
  if (!empty($scheme->old_scheme) && $scheme->old_scheme != $scheme->scheme) {
    $count = access_scheme_update_grants($scheme->old_scheme, $scheme->scheme);

    if ($count) {
      drupal_set_message(format_plural($count,
        'Changed the scheme of 1 access grant from %old to %new.',
        'Changed the scheme of @count access grants from %old to %new.',
        array('%old' => $scheme->old_scheme, '%new' => $scheme->scheme)));
    }
  }
}

/**
 * Updates all access grants of one scheme to be of another scheme.
 *
 * @param $old
 *   The scheme of the access grants to be changed.
 * @param $new
 *   The new scheme for the grants.
 *
 * @return
 *   The number of access grants whose scheme field was modified.
 */
function access_scheme_update_grants($old, $new) {
  return db_update('access_grant')
    ->fields(array('scheme' => $new))
    ->condition('scheme', $old)
    ->execute();
}

/**
 * Menu title callback for an access scheme.
 */
function access_scheme_page_title($scheme) {
  return $scheme->name;
}

/**
 * Implements hook_field_info().
 *
 * @see list_field_info()
 */
function access_field_info() {
  $settings = array(
    'boundary module' => '',
    'boundary type' => '',
    'boundary arguments' => array(),
  );

  // This is similar to the field types defined in the list module, but with
  // additional settings to be used by ACK plugins and no_ui set to prevent
  // access fields from being reused across access scheme bundles.
  return array(
    'access_integer' => array(
      'label' => t('Access control kit boundary (integer)'),
      'description' => t('Controls access via an integer value.'),
      'settings' => $settings,
      'default_widget' => 'options_select',
      'default_formatter' => 'access_default',
      'no_ui' => TRUE,
    ),
    'access_float' => array(
      'label' => t('Access control kit boundary (float)'),
      'description' => t('Controls access via a float value.'),
      'settings' => $settings,
      'default_widget' => 'options_select',
      'default_formatter' => 'access_default',
      'no_ui' => TRUE,
    ),
    'access_text' => array(
      'label' => t('Access control kit boundary (text)'),
      'description' => t('Controls access via a text value.'),
      'settings' => $settings,
      'default_widget' => 'options_select',
      'default_formatter' => 'access_default',
      'no_ui' => TRUE,
    ),
    'access_boolean' => array(
      'label' => t('Access control kit boundary (boolean)'),
      'description' => t('Controls access via a boolean value.'),
      'settings' => $settings,
      'default_widget' => 'options_buttons',
      'default_formatter' => 'access_default',
      'no_ui' => TRUE,
    ),
  );
}

/**
 * Implements hook_field_validate().
 *
 * Possible error codes:
 * - 'access_illegal_value': The value is not in the list of allowed values.
 *
 * @see list_field_validate()
 */
function access_field_validate($entity_type, $entity, $field, $instance, $langcode, $items, &$errors) {
  $allowed_values = access_allowed_values($field);
  foreach ($items as $delta => $item) {
    if (!empty($item['value'])) {
      if (!empty($allowed_values) && !isset($allowed_values[$item['value']])) {
        $errors[$field['field_name']][$langcode][$delta][] = array(
          'error' => 'access_illegal_value',
          'message' => t('%name: illegal value.', array('%name' => $instance['label'])),
        );
      }
    }
  }
}

/**
 * Implements hook_field_is_empty().
 *
 * @see list_field_is_empty()
 */
function access_field_is_empty($item, $field) {
  if (empty($item['value']) && (string) $item['value'] !== '0') {
    return TRUE;
  }
  return FALSE;
}

/**
 * Returns the set of allowed values for an access condition field.
 *
 * @param $field
 *   The field definition.
 *
 * @return
 *   The array of allowed values. Keys of the array are the raw stored values
 *   (number or text), values of the array are the display labels.
 */
function access_allowed_values($field) {
  $module = $field['settings']['boundary module'];
  $type = $field['settings']['boundary type'];
  $arguments = $field['settings']['boundary arguments'];

  return module_invoke($module, 'access_field_allowed_values', $type, $arguments);
}

/**
 * Implements hook_field_widget_info_alter().
 *
 * @see list_field_widget_info_alter()
 */
function access_field_widget_info_alter(&$info) {
  $widgets = array(
    'options_select' => array('access_integer', 'access_float', 'access_text'),
    'options_buttons' => array('access_integer', 'access_float', 'access_text', 'access_boolean'),
    'options_onoff' => array('access_boolean'),
  );

  foreach ($widgets as $widget => $field_types) {
    $info[$widget]['field types'] = array_merge($info[$widget]['field types'], $field_types);
  }
}

/**
 * Implements hook_options_list().
 */
function access_options_list($field, $instance, $entity_type, $entity) {
  return access_allowed_values($field);
}

/**
 * Implements hook_field_settings_form().
 */
function access_field_settings_form($field, $instance, $has_data) {
  $module = $field['settings']['boundary module'];
  $type = $field['settings']['boundary type'];
  $arguments = $field['settings']['boundary arguments'];

  // Get the config form from the access type handler module.
  $form['boundary arguments'] = module_invoke($module, 'access_field_settings_form', $type, $arguments);
  $form['boundary arguments']['#tree'] = TRUE;

  return $form;
}

/**
 * Implements hook_field_formatter_info().
 *
 * @see list_field_formatter_info()
 */
function access_field_formatter_info() {
  return array(
    'access_default' => array(
      'label' => t('Default'),
      'field types' => array('access_integer', 'access_float', 'access_text', 'access_boolean'),
    ),
  );
}

/**
 * Implements hook_field_formatter_view().
 *
 * @see list_field_formatter_view()
 */
function access_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();

  switch ($display['type']) {
    case 'access_default':
      $allowed_values = access_allowed_values($field);
      foreach ($items as $delta => $item) {
        if (isset($allowed_values[$item['value']])) {
          $output = field_filter_xss($allowed_values[$item['value']]);
        }
        else {
          // If no match was found in allowed values, fall back to the key.
          $output = field_filter_xss($item['value']);
        }
        $element[$delta] = array('#markup' => $output);
      }
      break;
  }

  return $element;
}

/**
 * Implements hook_permission().
 */
function access_permission() {
  $perms['administer access schemes'] = array(
    'title' => t('Administer access schemes'),
    'restrict access' => TRUE,
  );
  $perms['administer access grants'] = array(
    'title' => t('Administer access grants'),
    'restrict access' => TRUE,
  );
  return $perms;
}

/**
 * Implements hook_menu().
 */
function access_menu() {
  // Manage access grants.
  $items['admin/access'] = array(
    'title' => 'Access',
    'description' => 'Manage access grants.',
    'page callback' => 'access_overview_grants',
    'access arguments' => array('administer access grants'),
    // -2 places it between "People" and "Modules" on the default admin menu.
    'weight' => -2,
    'file' => 'access_grants.admin.inc',
  );
  $items['admin/access/list'] = array(
    'title' => 'List',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );
  $items['admin/access/add'] = array(
    'title' => 'Add access grant',
    'page callback' => 'access_grant_add_list',
    'access arguments' => array('administer access grants'),
    'type' => MENU_LOCAL_ACTION,
    'file' => 'access_grants.admin.inc',
  );
  $items['admin/access/add/%access_scheme'] = array(
    'title' => 'Add access grant for scheme',
    'title callback' => 'access_grant_add_page_title',
    'title arguments' => array(3),
    'page callback' => 'access_grant_add',
    'page arguments' => array(3),
    'access arguments' => array('administer access grants'),
    'file' => 'access_grants.admin.inc',
  );
  $items['admin/access/grant/%access_grant'] = array(
    'title callback' => 'access_grant_page_title',
    'title arguments' => array(3),
    'page callback' => 'access_grant_view',
    'page arguments' => array(3),
    'access arguments' => array('administer access grants'),
    'file' => 'access_grants.admin.inc',
  );
  $items['admin/access/grant/%access_grant/view'] = array(
    'title' => 'View',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );
  $items['admin/access/grant/%access_grant/edit'] = array(
    'title' => 'Edit',
    'page callback' => 'access_grant_edit',
    'page arguments' => array(3),
    'access arguments' => array('administer access grants'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'access_grants.admin.inc',
  );

  // Manage access schemes.
  $items['admin/structure/access'] = array(
    'title' => 'Access schemes',
    'description' => 'Define access control schemes.',
    'page callback' => 'access_overview_schemes',
    'access arguments' => array('administer access schemes'),
    'file' => 'access_schemes.admin.inc',
  );
  $items['admin/structure/access/list'] = array(
    'title' => 'List',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );
  $items['admin/structure/access/add'] = array(
    'title' => 'Add access scheme',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('access_scheme_form'),
    'access arguments' => array('administer access schemes'),
    'type' => MENU_LOCAL_ACTION,
    'file' => 'access_schemes.admin.inc',
  );
  $items['admin/structure/access/manage/%access_scheme'] = array(
    'title' => 'Edit access scheme',
    'title callback' => 'access_scheme_page_title',
    'title arguments' => array(4),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('access_scheme_form', 4),
    'access arguments' => array('administer access schemes'),
    'file' => 'access_schemes.admin.inc',
  );
  $items['admin/structure/access/manage/%access_scheme/edit'] = array(
    'title' => 'Edit',
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  $items['admin/structure/access/manage/%access_scheme/delete'] = array(
    'title' => 'Delete',
    'page arguments' => array('access_scheme_delete_confirm', 4),
    'access arguments' => array('administer access schemes'),
    'file' => 'access_schemes.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_theme().
 */
function access_theme() {
  return array(
    'access_schemes_overview' => array(
      'variables' => array('scheme' => NULL),
      'file' => 'access_schemes.admin.inc',
    ),
  );
}

/**
 * Implements hook_hook_info().
 */
function access_hook_info() {
  $hooks['access_info'] = array('group' => 'access');
  $hooks['access_field_allowed_values'] = array('group' => 'access');
  $hooks['access_field_settings_form'] = array('group' => 'access');
  return $hooks;
}
