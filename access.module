<?php
/**
 * @file
 * The access control kit module.
 */

/**
 * Implements hook_entity_info().
 */
function access_entity_info() {
  // Access containers.
  $types['access_container'] = array(
    'label' => t('Access container'),
    'base table' => 'access_container',
    'uri callback' => 'access_container_uri',
    'fieldable' => TRUE,
    'entity keys' => array(
      'id' => 'cid',
      'bundle' => 'scheme',
      'label' => 'name',
    ),
    'bundle keys' => array(
      'bundle' => 'scheme',
    ),
    'bundles' => array(),
    'view modes' => array(
      'full' => array(
        'label' => t('Access container page'),
        'custom settings' => FALSE,
      ),
    ),
  );

  // Bundles are access schemes; some fields represent conditions for
  // considering an object to be a member of an access container.
  foreach (access_scheme_get_names() as $scheme => $name) {
    $types['access_container']['bundles'][$scheme] = array(
      'label' => $name,
      'admin' => array(
        'path' => 'admin/structure/access/manage/%access_scheme',
        'real path' => 'admin/structure/access/manage/' . str_replace('_', '-', $scheme),
        'bundle argument' => 4,
        'access arguments' => array('administer access control kit'),
      ),
    );
  }

  return $types;
}

/**
 * Entity URI callback; access container.
 */
function access_container_uri($container) {
  return array('path' => 'admin/structure/access/container/' . $container->cid);
}

/**
 * Sets the default values for an access scheme.
 *
 * @param $info
 *   An object or array containing values to override the defaults.
 *
 * @return
 *   An access scheme object.
 */
function access_scheme_set_defaults($info = array()) {
  $info = (array) $info;
  $new_scheme = $info + array(
    'scheme' => '',
    'name' => '',
    'description' => '',
  );
  $new_scheme = (object) $new_scheme;
  return $new_scheme;
}

/**
 * Returns a list of all defined access scheme names.
 *
 * @return
 *   An array of scheme names, keyed by machine name.
 */
function access_scheme_get_names() {
  return db_query('SELECT scheme, name FROM {access_scheme} ORDER BY scheme', array(), array('fetch' => PDO::FETCH_ASSOC));
}

/**
 * Returns the access scheme for a given container.
 *
 * @param $container
 *   An access container object, or an access scheme machine name string.
 *
 * @return
 *   A single access scheme object, or FALSE if not found.
 */
function access_scheme_get_scheme($container) {
  $scheme = is_object($container) ? $container->scheme : $container;
  return db_query('SELECT * FROM {access_scheme} WHERE scheme = :scheme', array(':scheme' => $scheme));
}

/**
 * Loads an access scheme by machine name.
 *
 * @param $scheme
 *   The machine-readable name of a scheme, where '_' is replaced with '-'.
 *
 * @return
 *   An access scheme object, or FALSE if $scheme does not exist.
 */
function access_scheme_load($scheme) {
  return access_scheme_get_scheme(strtr($scheme, array('-' => '_')));
}

/**
 * Saves an access scheme to the database.
 *
 * @param $info
 *   The access scheme to save, as an object.
 *
 * @return
 *   Status flag indicating the outcome of the database operation.
 */
function access_scheme_save($info) {
  // Check whether this is a new scheme or an update of an existing one.
  $existing_scheme = !empty($info->old_scheme) ? $info->old_scheme : $info->scheme;
  $is_existing = (bool) db_query_range('SELECT 1 FROM {access_scheme} WHERE scheme = :scheme', 0, 1, array(':scheme' => $existing_scheme))->fetchField();

  // Set the field values for the insert/update query.
  $scheme = access_scheme_set_defaults($info);
  $fields = array(
    'scheme' => (string) $scheme->scheme,
    'name' => (string) $scheme->name,
    'description' => (string) $scheme->description,
  );

  if ($is_existing) {
    db_update('access_scheme')
      ->fields($fields)
      ->condition('scheme', $existing_scheme)
      ->execute();
    $status = SAVED_UPDATED;

    // If the machine name was changed, we need to notify the Field API.
    if (!empty($scheme->old_scheme) && $scheme->old_scheme != $scheme->scheme) {
      field_attach_rename_bundle('access_container', $scheme->old_scheme, $scheme->scheme);
    }

    // Allow other modules to react to the change.
    module_invoke_all('access_scheme_update', $scheme);
  }
  else {
    db_insert('access_scheme')
      ->fields($fields)
      ->execute();
    $status = SAVED_NEW;

    // Notify the Field API of the new bundle.
    field_attach_create_bundle('access_container', $scheme->scheme);

    // Allow other modules to react to the new scheme definition.
    module_invoke_all('access_scheme_insert', $scheme);
  }

  return $status;
}

/**
 * Implements hook_permission().
 */
function access_permission() {
  $perms['administer access control kit'] = array(
    'title' => t('Administer access control kit'),
    'description' => t('Add, edit, and delete access schemes and containers'),
    'restrict access' => TRUE,
  );
  return $perms;
}

/**
 * Implements hook_menu().
 */
function access_menu() {
//  $items['admin/structure/access/manage/%access_scheme'] = array();
//  $items['admin/structure/access/container/%access_container'] = array();
//  return $items;
}
