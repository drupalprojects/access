<?php
/**
 * @file
 * The access control kit module.
 */

/**
 * Implements hook_entity_info().
 */
function access_entity_info() {
  // Access grants.
  $types['access_grant'] = array(
    'label' => t('Access grant'),
    'base table' => 'access_grant',
    'uri callback' => 'access_grant_uri',
    'label callback' => 'access_grant_label',
    'fieldable' => TRUE,
    'entity keys' => array(
      'id' => 'gid',
      'bundle' => 'scheme',
    ),
    'bundle keys' => array(
      'bundle' => 'scheme',
    ),
    'bundles' => array(),
    'view modes' => array(
      'full' => array(
        'label' => t('Access grant page'),
        'custom settings' => FALSE,
      ),
    ),
  );

  // Bundles are access schemes; the access realm field in the bundle determines
  // which objects are accessible to a user via an access grant.
  foreach (access_scheme_get_names() as $scheme => $name) {
    $types['access_grant']['bundles'][$scheme] = array(
      'label' => $name,
      'admin' => array(
        'path' => 'admin/structure/access/manage/%access_scheme',
        'real path' => 'admin/structure/access/manage/' . str_replace('_', '-', $scheme),
        'bundle argument' => 4,
        'access arguments' => array('administer access schemes'),
      ),
    );
  }

  return $types;
}

/**
 * Entity URI callback for an access grant.
 */
function access_grant_uri($grant) {
  return array('path' => 'admin/access/grant/' . $grant->gid);
}

/**
 * Entity label callback for an access grant.
 */
function access_grant_label($grant) {
  // Load the primary descriptors of the grant.
  $account = user_load($grant->uid);
  $role = user_role_load($grant->rid);

  // Sanitize the descriptors.
  $username = empty($account) ? $grant->uid : format_username($account);
  $rolename = empty($role) ? $grant->rid : $role->name;

  return t("@user's access as @role", array('@user' => $username, '@role' => $rolename));
}

/**
 * Returns the list of realms on an access grant.
 *
 * @param $grant
 *   An access grant object.
 *
 * @return
 *   A list of assigned realms, where the keys are the values of the grant's
 *   access realm field, and the values are the realm labels.
 */
function access_grant_realms($grant) {
  $field_name = access_scheme_fieldname($grant->scheme);
  $assigned = isset($grant->$field_name) ? $grant->$field_name : array('und' => array());

  // Get the list of allowed realms for the scheme.
  $allowed = access_scheme_realms($grant->scheme);

  $realms = array();
  foreach ($assigned['und'] as $data) {
    $key = $data['value'];
    if (isset($allowed[$key])) {
      $realms[$key] = field_filter_xss($allowed[$key]);
    }
  }
  return $realms;
}

/**
 * Loads an access grant from the database.
 *
 * @param $gid
 *   The grant ID.
 * @param $reset
 *   (optional) Whether to reset the internal cache.  Defaults to FALSE.
 *
 * @return
 *   An access grant object, or FALSE if the grant is not found.
 */
function access_grant_load($gid, $reset = FALSE) {
  $grants = access_grant_load_multiple(array($gid), $reset);
  return reset($grants);
}

/**
 * Loads access grants from the database based on a set of conditions.
 *
 * @param $conditions
 *   An array of search conditions. Valid conditions are:
 *   - 'scheme': a scheme name.
 *   - 'uid': a user ID.
 *   - 'rid': a role ID.
 *   - 'realms': an array of realm values.  Only used if 'scheme' is provided.
 * @param $reset
 *   (optional) Whether to reset the internal cache.  Defaults to FALSE.
 *
 * @return
 *   An array of access grant objects matching the given parameters.
 */
function access_grant_load_by_condition($conditions = array(), $reset = FALSE) {
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'access_grant');

  if (isset($conditions['scheme'])) {
    $query->entityCondition('bundle', $conditions['scheme']);
    if (isset($conditions['realms'])) {
      $field_name = access_scheme_fieldname($conditions['scheme']);
      $query->fieldCondition($field_name, 'value', $conditions['realms']);
    }
  }
  if (isset($conditions['uid'])) {
    $query->propertyCondition('uid', $conditions['uid']);
  }
  if (isset($conditions['rid'])) {
    $query->propertyCondition('rid', $conditions['rid']);
  }

  $result = $query->execute();
  if (empty($result)) {
    return array();
  }
  $gids = array_keys($result['access_grant']);
  return access_grant_load_multiple($gids, $reset);
}

/**
 * Loads access grants from the database.
 *
 * Rather than accepting the deprecated $conditions parameter, as entity_load()
 * does, this function instead enforces the new preferred approach of using
 * EntityFieldQuery to get a list of grant IDs before calling this function.
 *
 * @param $gids
 *   An array of grant IDs, or FALSE to load all grants.
 * @param $reset
 *   Whether to reset the internal cache.
 *
 * @return
 *   An array of access grant objects indexed by their IDs. When no results
 *   are found, an empty array is returned.
 *
 * @see entity_load()
 * @see EntityFieldQuery
 */
function access_grant_load_multiple($gids = FALSE, $reset = FALSE) {
  return entity_load('access_grant', $gids, array(), $reset);
}

/**
 * Saves an access grant to the database.
 *
 * @param $grant
 *   An access grant object with the following properties:
 *   - gid: (optional) The unique ID for the grant being saved. If $grant->gid
 *     is empty or omitted, a new grant will be inserted.
 *   - uid: The ID of the user being granted access.
 *   - rid: The ID of the role being granted to the user.
 *   - scheme: The machine name of the scheme to which the grant belongs.
 *   - original: (optional) The original grant object before any changes were
 *     applied. When omitted, the unchanged grant object is loaded from the
 *     database and stored in this property.
 *   Since an access grant is an entity, any fields contained in the grant
 *   object are saved alongside the grant object.
 *
 * @return
 *   Status constant indicating whether the grant was inserted (SAVED_NEW) or
 *   updated (SAVED_UPDATED). When inserting a new grant, $grant->gid will
 *   contain the ID of the newly created grant.
 */
function access_grant_save($grant) {
  $transaction = db_transaction();
  try {
    // Load the stored entity, if any.
    if (!empty($grant->gid) && !isset($grant->original)) {
      $grant->original = entity_load_unchanged('access_grant', $grant->gid);
    }

    field_attach_presave('access_grant', $grant);
    module_invoke_all('access_grant_presave', $grant);
    module_invoke_all('entity_presave', $grant, 'access_grant');

    if (empty($grant->gid)) {
      $op = 'insert';
      $status = drupal_write_record('access_grant', $grant);
      field_attach_insert('access_grant', $grant);
    }
    else {
      $op = 'update';
      $status = drupal_write_record('access_grant', $grant, 'gid');
      field_attach_update('access_grant', $grant);
    }

    module_invoke_all('access_grant_' . $op, $grant);
    module_invoke_all('entity_' . $op, $grant, 'access_grant');
    unset($grant->original);

    return $status;
  }
  catch (Exception $e) {
    $transaction->rollback();
    watchdog_exception('access', $e);
    throw $e;
  }
}

/**
 * Deletes an access grant from the database.
 *
 * @param $gid
 *   The grant ID.
 *
 * @return
 *   Status constant indicating deletion.
 */
function access_grant_delete($gid) {
  $transaction = db_transaction();
  try {
    if ($grant = access_grant_load($gid)) {
      db_delete('access_grant')
        ->condition('gid', $gid)
        ->execute();

      field_attach_delete('access_grant', $grant);
      module_invoke_all('access_grant_delete', $grant);
      module_invoke_all('entity_delete', $grant, 'access_grant');
    }
    return SAVED_DELETED;
  }
  catch (Exception $e) {
    $transaction->rollback();
    watchdog_exception('access', $e);
    throw $e;
  }
}

/**
 * Menu title callback for an access grant.
 */
function access_grant_page_title($grant) {
  return access_grant_label($grant);
}

/**
 * Menu title callback for adding a grant within a scheme.
 */
function access_grant_add_page_title($scheme) {
  return t('Grant access to @scheme', array('@scheme' => $scheme->name));
}

/**
 * Menu page callback; view a single access grant.
 */
function access_grant_page_view($grant) {
  $grants = access_grant_view_multiple(array($grant->gid => $grant), 'full');
  return $grants;
}

/**
 * Constructs an array for drupal_render() from an array of access grants.
 *
 * @param $grants
 *   An array of grants objects, as returned by access_grant_load_multiple().
 * @param $view_mode
 *   View mode, e.g. 'full'.
 * @param $weight
 *   An integer representing the weight of the first grant in the list.
 *
 * @return
 *   An array in the format expected by drupal_render().
 */
function access_grant_view_multiple($grants, $view_mode = 'full', $weight = 0) {
  field_attach_prepare_view('access_grant', $grants, $view_mode);
  entity_prepare_view('access_grant', $grants);
  $build = array();
  foreach ($grants as $grant) {
    $build['grants'][$grant->gid] = access_grant_view($grant, $view_mode);
    $build['grants'][$grant->gid]['#weight'] = $weight;
    $weight++;
  }
  $build['grants']['#sorted'] = TRUE;
  return $build;
}

/**
 * Generates an array for rendering the given access grant.
 *
 * @param $grant
 *   An access grant object.
 * @param $view_mode
 *   View mode, e.g. 'full'.
 *
 * @return
 *   An array in the format expected by drupal_render().
 */
function access_grant_view($grant, $view_mode = 'full') {
  // Retrieve all fields and attach to $grant->content.
  access_grant_build_content($grant, $view_mode);

  $build = $grant->content;
  // We don't need it twice.
  unset($grant->content);

  $build += array(
    '#theme' => 'access_grant',
    '#access_grant' => $grant,
    '#view_mode' => $view_mode,
  );

  $type = 'access_grant';
  drupal_alter(array('access_grant_view', 'entity_view'), $build, $type);

  return $build;
}

/**
 * Builds a structured array representing the access grant in $grant->content.
 *
 * @param $grant
 *   An access grant object.
 * @param $view_mode
 *   View mode, e.g. 'full'.
 */
function access_grant_build_content($grant, $view_mode = 'full') {
  $grant->content = array();

  // Build fields content.
  // An internal flag prevents this from happening twice, such as when called
  // through access_grant_view_multiple().
  field_attach_prepare_view('access_grant', array($grant->gid => $grant), $view_mode);
  entity_prepare_view('access_grant', array($grant->gid => $grant));
  $grant->content += field_attach_view('access_grant', $grant, $view_mode);

  module_invoke_all('access_grant_view', $grant, $view_mode);
  module_invoke_all('entity_view', $grant, 'access_grant', $view_mode);
}

/**
 * AJAX callback for the access grant form.
 */
function access_grant_form_ajax($form, $form_state) {
  return $form['role'];
}

/**
 * Implements hook_access_grant_view().
 */
function access_access_grant_view($grant) {
  $account = user_load($grant->uid);
  $grant->content['user'] = array(
    '#type' => 'item',
    '#title' => t('User:'),
    '#markup' => theme('username', array('account' => $account)),
    '#weight' => -5,
  );

  $role = user_role_load($grant->rid);
  $grant->content['role'] = array(
    '#type' => 'item',
    '#title' => t('Role:'),
    '#markup' => check_plain($role->name),
    '#weight' => -4,
  );
}

/**
 * Sets the default values for an access scheme.
 *
 * @param $info
 *   An object or array containing values to override the defaults.
 *
 * @return
 *   An access scheme object.
 */
function access_scheme_set_defaults($info = array()) {
  $info = (array) $info;
  $new_scheme = $info + array(
    'scheme' => '',
    'name' => '',
    'realm_type' => '',
    'description' => '',
  );
  $new_scheme = (object) $new_scheme;
  return $new_scheme;
}

/**
 * Returns a list of all defined access scheme names.
 *
 * @return
 *   An array of scheme names, keyed by machine name.
 */
function access_scheme_get_names() {
  return db_query('SELECT scheme, name FROM {access_scheme} ORDER BY scheme')->fetchAllKeyed();
}

/**
 * Returns an array of access schemes.
 *
 * @param $schemes
 *   (optional) An access scheme machine name string, or an array of such names.
 *
 * @return
 *   An array of access scheme objects matching the given machine name(s), keyed
 *   by machine name.  If $schemes is not given, returns all defined schemes.
 */
function access_scheme_get_schemes($schemes = NULL) {
  $query = db_select('access_scheme', 'a')
    ->fields('a')
    ->orderBy('a.scheme');

  if (isset($schemes)) {
    if (is_array($schemes)) {
      $query->condition('a.scheme', $schemes, 'IN');
    }
    else {
      $query->condition('a.scheme', $schemes);
    }
  }

  $result = $query->execute()->fetchAllAssoc('scheme');
  foreach ($result as $record) {
    access_handler_attach_handlers($record);
  }
  return $result;
}

/**
 * Returns the scheme for a given access grant.
 *
 * @param $grant
 *   An access grant object, or an access scheme machine name string.
 *
 * @return
 *   A single access scheme object, or FALSE if not found.
 */
function access_scheme_get_scheme($grant) {
  $scheme = is_object($grant) ? $grant->scheme : $grant;
  $result = access_scheme_get_schemes($scheme);
  return reset($result);
}

/**
 * Loads an access scheme by its URL-friendly machine name.
 *
 * @param $scheme
 *   The machine-readable name of a scheme, where '_' is replaced with '-'.
 *
 * @return
 *   An access scheme object, or FALSE if $scheme does not exist.
 */
function access_scheme_load($scheme) {
  return access_scheme_get_scheme(strtr($scheme, array('-' => '_')));
}

/**
 * Saves an access scheme to the database.
 *
 * @param $scheme
 *   The access scheme to save, as an object.
 *
 * @return
 *   Status flag indicating the outcome of the database operation.
 */
function access_scheme_save($scheme) {
  // Sanitize the values.
  $scheme = access_scheme_set_defaults($scheme);
  $scheme->scheme = (string) $scheme->scheme;
  $fields = array();
  foreach (array('name', 'realm_type', 'description') as $key) {
    $scheme->$key = (string) $scheme->$key;
    $fields[$key] = $scheme->$key;
  }

  // Look for an existing scheme.
  if (!isset($scheme->original)) {
    $scheme->original = access_scheme_get_scheme($scheme->scheme);
  }

  // The machine name and realm type are not editable after creation.
  if (!empty($scheme->original)) {
    $scheme->scheme = $scheme->original->scheme;
    $scheme->realm_type = $fields['realm_type'] = $scheme->original->realm_type;
  }

  // Save the scheme.
  $status = db_merge('access_scheme')
    ->key(array('scheme' => $scheme->scheme))
    ->fields($fields)
    ->execute();
  switch ($status) {
    case SAVED_NEW:
      field_attach_create_bundle('access_grant', $scheme->scheme);
      module_invoke_all('access_scheme_insert', $scheme);
      break;

    case SAVED_UPDATED:
      module_invoke_all('access_scheme_update', $scheme);
      break;
  }
  return $status;
}

/**
 * Deletes an access scheme from the database.
 *
 * @param $scheme
 *   The machine-readable name of the access scheme to be deleted.
 */
function access_scheme_delete($scheme) {
  $info = access_scheme_get_scheme($scheme);

  // Detach any access handlers for this scheme.
  db_delete('access_handler')
    ->condition('scheme', $scheme)
    ->execute();

  // Delete the access scheme definition.
  db_delete('access_scheme')
    ->condition('scheme', $scheme)
    ->execute();

  // Delete the scheme's role configuration.
  variable_del('access_scheme_roles_' . $scheme);

  // Notify the Field API and other interested modules of the deletion.
  field_attach_delete_bundle('access_grant', $scheme);
  module_invoke_all('access_scheme_delete', $info);
}

/**
 * Implements hook_access_scheme_insert().
 */
function access_access_scheme_insert($scheme) {
  // Create the realm field for the scheme.
  if ($info = access_realm_info($scheme->realm_type)) {
    $field_name = access_scheme_fieldname($scheme);

    // Make sure the field type is supported.
    $field_types = access_field_info();
    if (!isset($field_types[$info['field_type']])) {
      return;
    }

    // Create the field.
    $field = field_info_field($field_name);
    if (empty($field)) {
      $field = array(
        'field_name' => $field_name,
        'type' => $info['field_type'],
        'entity_types' => array('access_grant'),
        'cardinality' => -1,
        'locked' => TRUE,
        'settings' => array(
          'arguments' => isset($info['arguments']) ? $info['arguments'] : array(),
        ),
      );
      // If the realm field is configurable, merge in any available field
      // settings attached to the scheme.
      if (!empty($field['settings']['arguments']) && isset($scheme->realm_settings)) {
        $field['settings']['arguments'] = array_merge($field['settings']['arguments'], $scheme->realm_settings);
      }
      $field = field_create_field($field);
    }

    // Create the instance.
    $instance = field_info_instance('access_grant', $field_name, $scheme->scheme);
    if (empty($instance)) {
      $instance = array(
        'field_name' => $field_name,
        'entity_type' => 'access_grant',
        'bundle' => $scheme->scheme,
        'label' => check_plain($scheme->name),
        'description' => filter_xss($scheme->description),
        'required' => TRUE,
      );
      $instance = field_create_instance($instance);
    }
  }
}

/**
 * Implements hook_access_scheme_update().
 */
function access_access_scheme_update($scheme) {
  // If the realm field is configurable, merge in any available field settings
  // attached to the scheme.
  $field = field_info_field(access_scheme_fieldname($scheme));
  if (!empty($field['settings']['arguments']) && isset($scheme->realm_settings)) {
    $field['settings']['arguments'] = array_merge($field['settings']['arguments'], $scheme->realm_settings);
    field_update_field($field);
  }
}

/**
 * Returns the expected name of the access field for given scheme.
 *
 * @param $scheme
 *   An access scheme object, or the machine-readable name of an access scheme.
 *
 * @return
 *   The expected name of the access field.  Note that neither the scheme nor
 *   the field need to exist for this function to succeed.
 */
function access_scheme_fieldname($scheme) {
  // Schemes and realm fields have a one-to-one relationship, so naming the
  // field after the scheme should guarantee uniqueness.
  return is_object($scheme) ? 'ack_' . $scheme->scheme : 'ack_' . $scheme;
}

/**
 * Menu title callback for an access scheme.
 */
function access_scheme_page_title($scheme) {
  return check_plain($scheme->name);
}

/**
 * Returns a list of all realms in an access scheme.
 *
 * @param $scheme
 *   An access scheme object, or the machine-readable name of an access scheme.
 *
 * @return
 *   An array of realms.  The keys are the raw stored values (number or text)
 *   that identify the realm and the values are the realm display labels.
 */
function access_scheme_realms($scheme) {
  $field = field_info_field(access_scheme_fieldname($scheme));
  return empty($field) ? array() : access_field_allowed_values($field);
}

/**
 * Returns a list of user roles available for use within an access scheme.
 *
 * @param $scheme
 *   (optional) An access scheme object, or the machine-readable name of an
 *   access scheme. If excluded, roles for all schemes will be returned.
 *
 * @return
 *   An associative array of roles that can be used in the scheme, with the role
 *   id as the key and the role name as the value. If $scheme was omitted, this
 *   will be a nested array, indexed by scheme machine name, containing the role
 *   lists for all defined access schemes.
 */
function access_scheme_roles($scheme = NULL) {
  if (isset($scheme)) {
    $schemes = is_object($scheme) ? array($scheme->scheme) : array($scheme);
  }
  else {
    $schemes = array_keys(access_scheme_get_names());
  }

  // Get all user roles, excluding "anonymous users" and "authenticated users."
  $roles = user_roles(TRUE);
  unset($roles[DRUPAL_AUTHENTICATED_RID]);

  // Filter each scheme's roles list to only include valid roles.  We do this
  // (rather than trusting the scheme variable) to ensure that misconfiguration
  // of the variable doesn't result in showing roles that do not exist.
  $list = array();
  foreach ($schemes as $machine_name) {
    $scheme_roles = variable_get('access_scheme_roles_' . $machine_name, array());
    $list[$machine_name] = array_intersect_assoc($roles, $scheme_roles);
  }

  if (isset($scheme)) {
    return reset($list);
  }
  return $list;
}

/**
 * Returns access realm info.
 *
 * @param $realm_type
 *   (optional) A realm type string.
 *
 * @return
 *   The information array for the requested $realm_type, or FALSE if not found.
 *   If $realm_type is omitted, returns information for all available types.
 *
 * @see hook_access_realm_info()
 */
function access_realm_info($realm_type = NULL) {
  $types = array();
  foreach (module_implements('access_realm_info') as $module) {
    $info = module_invoke($module, 'access_realm_info');
    foreach (array_keys($info) as $type) {
      $info[$type]['module'] = $module;
      $info[$type]['realm_type'] = $type;
    }
    $types += $info;
  }

  if (isset($realm_type)) {
    return isset($types[$realm_type]) ? $types[$realm_type] : FALSE;
  }
  return $types;
}

/**
 * Returns the access realm info for a given access field.
 *
 * @param $field
 *   A field definition, as returned by field_info_field().
 *
 * @return
 *   The information array for the field's realm type, or FALSE if not found.
 */
function access_realm_info_by_field($field) {
  // Make sure the field is an access field.
  // Only supports a one-to-one relationship between schemes and access fields.
  $info = access_field_info();
  if (isset($info[$field['type']]) && !empty($field['bundles']['access_grant']) && $scheme = access_scheme_get_scheme(reset($field['bundles']['access_grant']))) {
    return access_realm_info($scheme->realm_type);
  }
  return FALSE;
}

/**
 * Returns an options list of all available realm types.
 *
 * @return
 *   An array where the keys are realm types and values are realm type labels.
 */
function access_realm_options() {
  $options = array();
  $realms = access_realm_info();
  foreach ($realms as $realm_type => $info) {
    $options[$realm_type] = $info['label'];
  }
  asort($options);
  return $options;
}

/**
 * Implements hook_field_info().
 *
 * @see list_field_info()
 */
function access_field_info() {
  $settings = array(
    'arguments' => array(),
  );

  // These are similar to the field types defined in list.module, but with an
  // 'arguments' setting to be used by ACK realm plugins and 'no_ui' set to
  // prevent access fields from being reused in other scheme bundles.
  return array(
    'access_integer' => array(
      'label' => t('Access control kit realm (integer)'),
      'description' => t('Controls access via an integer value.'),
      'settings' => $settings,
      'default_widget' => 'options_buttons',
      'default_formatter' => 'access_default',
      'no_ui' => TRUE,
    ),
    'access_float' => array(
      'label' => t('Access control kit realm (float)'),
      'description' => t('Controls access via a float value.'),
      'settings' => $settings,
      'default_widget' => 'options_buttons',
      'default_formatter' => 'access_default',
      'no_ui' => TRUE,
    ),
    'access_text' => array(
      'label' => t('Access control kit realm (text)'),
      'description' => t('Controls access via a text value.'),
      'settings' => $settings,
      'default_widget' => 'options_buttons',
      'default_formatter' => 'access_default',
      'no_ui' => TRUE,
    ),
    'access_boolean' => array(
      'label' => t('Access control kit realm (boolean)'),
      'description' => t('Controls access via a boolean value.'),
      'settings' => $settings,
      'default_widget' => 'options_buttons',
      'default_formatter' => 'access_default',
      'no_ui' => TRUE,
    ),
  );
}

/**
 * Implements hook_field_validate().
 *
 * Possible error codes:
 * - 'access_illegal_value': The value is not in the list of allowed values.
 *
 * @see list_field_validate()
 */
function access_field_validate($entity_type, $entity, $field, $instance, $langcode, $items, &$errors) {
  $allowed_values = access_field_allowed_values($field);
  foreach ($items as $delta => $item) {
    if (!empty($item['value'])) {
      if (empty($allowed_values) || !isset($allowed_values[$item['value']])) {
        $errors[$field['field_name']][$langcode][$delta][] = array(
          'error' => 'access_illegal_value',
          'message' => t('%name: illegal value.', array('%name' => $instance['label'])),
        );
      }
    }
  }
}

/**
 * Implements hook_field_is_empty().
 *
 * @see list_field_is_empty()
 */
function access_field_is_empty($item, $field) {
  if (empty($item['value']) && (string) $item['value'] !== '0') {
    return TRUE;
  }
  return FALSE;
}

/**
 * Returns the set of allowed values (realms) for an access field.
 *
 * @param $field
 *   The field definition.
 *
 * @return
 *   The array of allowed values. Keys of the array are the raw stored values
 *   (number or text), values of the array are the display labels.
 *
 * @see hook_access_realms()
 */
function access_field_allowed_values($field) {
  $info = access_realm_info_by_field($field);
  if ($info) {
    return module_invoke($info['module'], 'access_realms', $info['realm_type'], $field['settings']['arguments']);
  }
}

/**
 * Implements hook_field_widget_info_alter().
 *
 * @see list_field_widget_info_alter()
 */
function access_field_widget_info_alter(&$info) {
  $widgets = array(
    'options_select' => array('access_integer', 'access_float', 'access_text'),
    'options_buttons' => array('access_integer', 'access_float', 'access_text', 'access_boolean'),
    'options_onoff' => array('access_boolean'),
  );

  foreach ($widgets as $widget => $field_types) {
    $info[$widget]['field types'] = array_merge($info[$widget]['field types'], $field_types);
  }
}

/**
 * Implements hook_options_list().
 */
function access_options_list($field, $instance, $entity_type, $entity) {
  return access_field_allowed_values($field);
}

/**
 * Implements hook_field_settings_form().
 *
 * @see hook_access_realm_settings()
 */
function access_field_settings_form($field, $instance, $has_data) {
  $info = access_realm_info_by_field($field);
  $form['arguments'] = module_invoke($info['module'], 'access_realm_settings', $info['realm_type'], $has_data, $field['settings']['arguments']);
  $form['arguments']['#tree'] = TRUE;
  return $form;
}

/**
 * Implements hook_field_formatter_info().
 *
 * @see list_field_formatter_info()
 */
function access_field_formatter_info() {
  return array(
    'access_default' => array(
      'label' => t('Default'),
      'field types' => array('access_integer', 'access_float', 'access_text', 'access_boolean'),
    ),
  );
}

/**
 * Implements hook_field_formatter_view().
 *
 * @see list_field_formatter_view()
 */
function access_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();

  switch ($display['type']) {
    case 'access_default':
      $allowed_values = access_field_allowed_values($field);
      foreach ($items as $delta => $item) {
        if (isset($allowed_values[$item['value']])) {
          $output = field_filter_xss($allowed_values[$item['value']]);
        }
        else {
          // If no match was found in allowed values, fall back to the key.
          $output = field_filter_xss($item['value']);
        }
        $element[$delta] = array('#markup' => $output);
      }
      break;
  }

  return $element;
}

/**
 * Implements hook_field_extra_fields().
 */
function access_field_extra_fields() {
  $extra = array();
  $fields = array(
    'user' => array(
      'label' => t('User'),
      'description' => t('Access control kit user reference'),
      'weight'=> -5,
    ),
    'role' => array(
      'label' => t('Role'),
      'description' => t('Access control kit role reference'),
      'weight' => -4,
    ),
  );

  foreach (access_scheme_get_names() as $scheme => $name) {
    $extra['access_grant'][$scheme] = array(
      'form' => $fields,
      'display' => $fields,
    );
  }

  return $extra;
}

/**
 * Attaches configured access handlers to a scheme.
 *
 * @param $scheme
 *   An access scheme object. Any handlers attached to the scheme will be added
 *   in $scheme->handlers as an array of AccessControlKit objects, indexed by
 *   object type (e.g. the node handler will be in $scheme->handlers['node']).
 */
function access_handler_attach_handlers($scheme) {
  // Remove any previously built handlers, if any.
  $scheme->handlers = array();

  // Fetch handler configs from the database.
  $result = db_query('SELECT * FROM {access_handler} WHERE scheme = :scheme', array(':scheme' => $scheme->scheme));
  foreach ($result as $row) {
    // Initialize the handler using the class and settings from the database.
    $class = $row->handler;
    $settings = unserialize($row->settings);
    $scheme->handlers[$row->object_type] = new $class($scheme->scheme, $settings);
  }
}

/**
 * Saves an access handler attachment to the database.
 *
 * @param $scheme
 *   The name of the access scheme to which to attach the handler.
 * @param $object_type
 *   The type of Drupal object that the handler will manage (e.g. node).
 * @param $handler
 *   The name of the access handler class to attach.
 * @param $module
 *   The module that provides the handler.
 * @param $settings
 *   (optional) An array of settings to control the handler's behavior.
 *
 * @return
 *   Status flag indicating the outcome of the database operation.
 */
function access_handler_save($scheme, $object_type, $handler, $module, $settings = array()) {
  // Sanitize the inputs.
  $key = array(
    'scheme' => (string) $scheme,
    'object_type' => (string) $object_type,
  );
  $fields = array(
    'handler' => (string) $handler,
    'module' => (string) $module,
    'settings' => is_array($settings) ? $settings : array($settings),
  );
  $fields['settings'] = serialize($fields['settings']);

  // Add/update the attachment.
  $status = db_merge('access_handler')
    ->key($key)
    ->fields($fields)
    ->execute();
  return $status;
}

/**
 * Deletes an access handler attachment from the database.
 *
 * @param $scheme
 *   The name of the access scheme to which the handler is attached.
 * @param $object_type
 *   The type of Drupal object that the handler manages (e.g. node).
 */
function access_handler_delete($scheme, $object_type) {
  db_delete('access_handler')
    ->condition('scheme', $scheme)
    ->condition('object_type', $object_type)
    ->execute();
}

/**
 * AJAX callback for access handler settings forms.
 *
 * @see access_scheme_form()
 */
function access_handler_form_ajax($form, $form_state) {
  return $form['handlers']['handlers'];
}

/**
 * Returns a list of access handlers and the modules that provide them.
 *
 * @return
 *   A nested array indexed first by object type, then by handler name, where
 *   each value is the name of the module that provides that handler.
 */
function access_handler_modules() {
  $modules = module_implements('access_info');
  $list = array();
  foreach ($modules as $module) {
    $info = module_invoke($module, 'access_info');
    foreach ($info as $object_type => $object_info) {
      if (isset($object_info['handlers'])) {
        foreach (array_keys($object_info['handlers']) as $handler) {
          $list[$object_type][$handler] = $module;
        }
      }
    }
  }
  return $list;
}

/**
 * Interface for an object access handler.
 */
interface AccessControlKitInterface {
  /**
   * Returns the list of access realms that apply to the given object.
   *
   * @param mixed $object
   *   A Drupal object, such as a node, term, or menu item.  The actual data
   *   type depends on the object for which the class is providing ACK support.
   *
   * @return
   *   An array of realms of which $object is a member according to the handler.
   */
  public function getRealms($object);

  /**
   * Returns form elements needed to configure the handler.
   *
   * @param $realm_type
   *   The realm type of the access scheme to which the handler is attached.
   * @param array $realm_settings
   *   (optional) An array of configuration arguments for the realm type.
   *
   * @return
   *   An array of form elements, or array() if the handler does not require
   *   configuration. The array should not normally include a submit button, as
   *   one will be provided automatically by the ACK UI. The submitted values of
   *   the form will be saved as-is in the handler's settings array when
   *   attaching the handler to an access scheme. Note that the returned
   *   elements will be wrapped in an element with '#tree' => TRUE when this
   *   method is called by the ACK UI, and thus the submitted values will retain
   *   their structure in $this->settings.
   */
   public function settingsForm($realm_type, array $realm_settings = array());

   /**
    * Alters the form for a new object to reflect realm permissions.
    *
    * It is up to the handler module to invoke this method as needed from
    * hook_form_alter() to enforce realm permissions on new objects.
    * Implementations of this method should modify the form in such a way as to
    * prevent the user from creating the object in a realm to which they do not
    * have access.
    *
    * For example, if creating a node where access is granted via a list field,
    * the list field options should be modified to only show the realms where
    * the user has access to create the node.
    *
    * @param &$form
    *   Nested array of form elements that comprise the form.
    * @param &$form_state
    *   A keyed array containing the current state of the form.
    * @param $form_id
    *   String representing the name of the form itself. Typically this is the
    *   name of the function that generated the form.
    * @param $realms
    *   An array of realms in which the user has "create" access for the object,
    *   as realm_value => realm_label.
    */
    public function formAlterNew(&$form, &$form_state, $form_id, $realms = array());

   /**
    * Alters the form for an existing object to reflect realm permissions.
    *
    * It is up to the handler module to invoke this method as needed from
    * hook_form_alter() to enforce realm permissions on existing objects.
    * Implementations of this method should modify the form in such a way as to
    * prevent the user from changing the object's assigned realms, and to
    * prevent deleting the object unless the user has delete permission for one
    * of the object's assigned realms.
    *
    * For example, if editing a node where access is granted via a list field,
    * the list field should be locked (i.e., #access => FALSE), and the delete
    * button should be removed unless the user has the "delete" permission for
    * one of the realm values currently assigned to the field.
    *
    * @param &$form
    *   Nested array of form elements that comprise the form.
    * @param &$form_state
    *   A keyed array containing the current state of the form.
    * @param $form_id
    *   String representing the name of the form itself. Typically this is the
    *   name of the function that generated the form.
    * @param $realms
    *   An array of realms in which the user has "delete" access for the object,
    *   as realm_value => realm_label.
    */
    public function formAlterExisting(&$form, &$form_state, $form_id, $realms = array());
}

/**
 * Base class for object access handlers.
 */
abstract class AccessControlKit implements AccessControlKitInterface {
  /**
   * The name of the access scheme to which the handler is attached.
   *
   * @var string
   */
  protected $scheme;

  /**
   * The access handler configuration.
   *
   * @var array
   */
  protected $settings;

  /**
   * Constructs an AccessControlKit object.
   *
   * @param $scheme
   *   The name of the access scheme to which the handler is attached.
   * @param array $settings
   *   The handler configuration array.
   */
  public function __construct($scheme = '', array $settings = array()) {
    $this->scheme = $scheme;
    $this->settings = $settings;
  }

  /**
   * Implements AccessControlKitInterface::getRealms().
   */
  public function getRealms($object) {
    return array();
  }

  /**
   * Implements AccessControlKitInterface::settingsForm().
   */
  public function settingsForm($realm_type, array $realm_settings = array()) {
    return array();
  }

  /**
   * Implements AccessControlKitInterface::formAlterNew().
   */
  public function formAlterNew(&$form, &$form_state, $form_id, $realms = array()) {
    // No filtering needed in the abstract class.  Subclasses can make use of
    // the convenience function $this->filterElementOptions() to filter the
    // #options attribute of access-related form elements by $realms.
  }

  /**
   * Implements AccessControlKitInterface::formAlterExisting().
   */
  public function formAlterExisting(&$form, &$form_state, $form_id, $realms = array()) {
    // No filtering needed in the abstract class.  Subclasses should lock any
    // access-related form fields.  Access to "Delete" buttons, etc., should
    // also be blocked if the current value of an access-related element is not
    // present in $realms.
  }

  /**
   * Filters a form element's #options to only include accessible realms.
   *
   * The element's '#options' array will be filtered according to the realms
   * parameter to only show values that the user can access.  If only one option
   * remains, the element will be set to that option and disabled.
   *
   * @param &$element
   *   A form element with an '#options' attribute (such as #type => 'select',
   *   'radio', or 'checkboxes'), passed by reference.
   * @param $realms
   *   An associative array indicating which options the user is allowed to set,
   *   as realm_value => realm_label.
   * @param $empty_value
   *   (optional) The #options key that denotes that no selection has been made.
   */
  protected function filterElementOptions(&$element, $realms, $empty_value = NULL) {
    $options = array();
    // Preserve the empty option, if one was specified.
    if (isset($empty_value) && isset($element['#options'][$empty_value])) {
      $options[$empty_value] = $element['#options'][$empty_value];
    }
    // Include only those options that correspond to allowed realms.
    $options += array_intersect_key($element['#options'], $realms);

    // If the element is required, and only one option remains besides the empty
    // value, then remove the empty value as an option.
    if (!empty($element['#required']) && count($options) == 2 && isset($empty_value) && isset($options[$empty_value])) {
      unset($options[$empty_value]);
    }

    $element['#options'] = $options;
    if (count($element['#options']) == 1) {
      $element['#disabled'] = TRUE;
      $element['#default_value'] = key($element['#options']);
    }
  }

  /**
   * Returns the handler settings.
   *
   * @param $name
   *   (optional) The name of a setting.  If omitted, returns all settings.
   * @param $empty_value
   *   (optional) If $name does not exist in the handler settings, this will be
   *   returned instead.  Defaults to NULL.  Ignored if $name is omitted.
   *
   * @return
   *   The value of the requested handler setting, or all handler settings in an
   *   array as name => value.
   */
  protected function getSetting($name = NULL, $empty_value = NULL) {
    $settings = empty($this->settings) ? array() : $this->settings;
    if (isset($name)) {
      return isset($settings[$name]) ? $settings[$name] : $empty_value;
    }
    return $settings;
  }

  /**
   * Returns the settings for the scheme to which the handler is attached.
   *
   * @param $name
   *   (optional) The name of a setting.  If omitted, returns all settings.
   * @param $empty_value
   *   (optional) If $name does not exist in the scheme settings, this will be
   *   returned instead.  Defaults to NULL.  Ignored if $name is omitted.
   *
   * @return
   *   The value of the requested scheme setting, or all scheme settings in an
   *   array as name => value.
   */
  protected function getSchemeSetting($name = NULL, $empty_value = NULL) {
    $ack_fieldname = access_scheme_fieldname($this->scheme);
    $ack_field = field_info_field($ack_fieldname);
    $settings = empty($ack_field['settings']['arguments']) ? array() : $ack_field['settings']['arguments'];
    if (isset($name)) {
      return isset($settings[$name]) ? $settings[$name] : $empty_value;
    }
    return $settings;
  }

  /**
   * Wrapper for field_get_items() to get raw field values as an array.
   *
   * @param $key
   *   The name of the key in each item that contains the value; e.g., 'tid'.
   * @param $entity_type
   *   The type of $entity; e.g., 'node' or 'user'.
   * @param $entity
   *   The entity containing the data to be displayed.
   * @param $field_name
   *   The field to be displayed.
   * @param $langcode
   *   (optional) The language code $entity->{$field_name} has to be displayed
   *   in.  Defaults to the current language.
   *
   * @return
   *   A flat array of the field's current values.  Note that delta keys, etc.
   *   are not preserved.
   */
  protected function getFieldValues($key, $entity_type, $entity, $field_name, $langcode = NULL) {
    $values = array();
    if ($items = field_get_items($entity_type, $entity, $field_name, $langcode)) {
      foreach ($items as $item) {
        $values[] = $item[$key];
      }
    }
    return $values;
  }
}

/**
 * Returns a list of realms that apply to an object per scheme.
 *
 * @param $object_type
 *   The type of access controlled object, such as 'node'.
 * @param $object
 *   The object for which to return realm memberships.
 * @param $schemes
 *   (optional) An array of access scheme objects. If given, returns only realm
 *   memberships for these schemes. Otherwise, returns realms for all schemes.
 *
 * @return
 *   An array indexed by scheme machine name where each value is an array of
 *   realms of which the $object is a member according to that scheme. If the
 *   $object is not a member of any realms for a scheme, that scheme's value
 *   will be array().
 */
function access_object_realms($object_type, $object, $schemes = NULL) {
  if (!isset($schemes)) {
    $schemes = access_scheme_get_schemes();
  }
  $realms = array();
  foreach ($schemes as $scheme) {
    $realms[$scheme->scheme] = isset($scheme->handlers[$object_type]) ? $scheme->handlers[$object_type]->getRealms($object) : array();
  }
  return $realms;
}

/**
 * Returns a list of a user's ACK roles with scheme and realm assignments.
 *
 * @param $account
 *   (optional) The account to check. Defaults to the currently logged in user.
 *
 * @return
 *   A nested array indexed first by role ID, then by scheme machine name, where
 *   the values are an array containing the user's assigned realms for that role
 *   in that scheme. Note that the list of roles is limited to those returned by
 *   access_scheme_roles() for each scheme; non-ACK roles are excluded.
 *
 * @see access_scheme_roles()
 */
function access_user_roles($account = NULL) {
  global $user;
  if (!isset($account)) {
    $account = $user;
  }

  // Cache the user's role list using the advanced drupal_static() pattern for
  // best performance on repeated access checks.
  static $drupal_static_fast;
  if (!isset($drupal_static_fast)) {
    $drupal_static_fast['user_roles'] = &drupal_static(__FUNCTION__);
  }
  $user_roles = &$drupal_static_fast['user_roles'];

  // On cache miss, load all grants for the user and sort by role and scheme.
  if (!isset($user_roles[$account->uid])) {
    $grants = access_grant_load_by_condition(array('uid' => $account->uid));
    $allowed_roles = access_scheme_roles();
    $roles = array();
    foreach ($grants as $grant) {
      // Only include roles that are in the current list of ACK-enabled roles
      // (in case the scheme settings have changed), and that are currently
      // associated with the user (in case another module revoked a role without
      // ACK being notified to clean up grants).
      if (isset($allowed_roles[$grant->scheme][$grant->rid]) && isset($account->roles[$grant->rid])) {
        $roles[$grant->rid][$grant->scheme] = access_grant_realms($grant);
      }
    }
    $user_roles[$account->uid] = $roles;
  }

  return $user_roles[$account->uid];
}

/**
 * Determines whether a user has a permission on an object via an access grant.
 *
 * @param $string
 *   The permission, such as "edit any page".
 * @param $object_type
 *   The type of access controlled object, such as "node".
 * @param $object
 *   The object that the user is trying to access. May be an object or an array,
 *   depending on the $object_type.
 * @param $scheme
 *   (optional) The machine name of the access scheme in which to check access.
 *   If omitted, access is checked in all available access schemes.
 * @param $account
 *   (optional) The account to check. Defaults to the currently logged in user.
 *
 * @return
 *   Boolean TRUE if the user has the requested permission on the object via an
 *   access grant in the $scheme, or in any scheme if $scheme was omitted.
 */
function access_user_object_access($string, $object_type, $object, $scheme = NULL, $account = NULL) {
  global $user;
  if (!isset($account)) {
    $account = $user;
  }

  // Sanity check to make sure that the user has the permission at all.
  if (!user_access($string, $account)) {
    return FALSE;
  }

  // Get the object's realm memberships.
  if (isset($scheme)) {
    $schemes = array($scheme => access_scheme_get_scheme($scheme));
  }
  else {
    $schemes = access_scheme_get_schemes();
  }
  $object_realms = access_object_realms($object_type, $object, $schemes);

  // Check the user's access in each scheme.
  foreach ($schemes as $scheme_info) {
    $user_realms = access_user_permission_realms($string, $scheme_info->scheme, $account);
    foreach ($object_realms[$scheme_info->scheme] as $realm) {
      if (isset($user_realms[$realm])) {
        // If we get a match, there's no need to keep checking other schemes.
        return TRUE;
      }
    }
  }
  return FALSE;
}

/**
 * Finds the realms where a user has a given permission via an access grant.
 *
 * @param $string
 *   The permission, such as "edit any page".
 * @param $scheme
 *   (optional) The machine name of the access scheme in which to check access.
 *   If omitted, access is checked in all available access schemes.
 * @param $account
 *   (optional) The account to check. Defaults to the currently logged in user.
 *
 * @return
 *   An array whose keys are the realm values for which the user has been
 *   granted the permission, and whose values are the corresponding realm
 *   labels.  An empty array() indicates that the user does not have the
 *   permission in any realm in the scheme.  If the $scheme paramater was
 *   omitted, this will be a nested array indexed by scheme machine name.
 */
function access_user_permission_realms($string, $scheme = NULL, $account = NULL) {
  global $user;
  if (!isset($account)) {
    $account = $user;
  }

  if (isset($scheme)) {
    $schemes = array($scheme);
  }
  else {
    $schemes = array_keys(access_scheme_get_names());
  }

  // Get the user's realm role assignments via access grants.
  $roles = access_user_roles($account);
  // Filter out any roles that do not include the permission we're looking for.
  foreach (user_role_permissions($roles) as $rid => $permissions) {
    if (empty($permissions[$string])) {
      unset($roles[$rid]);
    }
  }

  // Find the accessible realms for each scheme.
  $realms = array();
  foreach ($schemes as $machine_name) {
    $scheme_realms = array();
    foreach ($roles as $access) {
      if (!empty($access[$machine_name])) {
        $scheme_realms += $access[$machine_name];
      }
    }
    $realms[$machine_name] = $scheme_realms;
  }
  return isset($scheme) ? reset($realms) : $realms;
}

/**
 * Implements hook_theme().
 */
function access_theme() {
  return array(
    'access_schemes_overview' => array(
      'variables' => array('scheme' => NULL),
      'file' => 'access_schemes.admin.inc',
    ),
    'access_grant' => array(
      'render element' => 'elements',
      'template' => 'access-grant',
      'file' => 'access_grants.admin.inc',
    ),
  );
}

/**
 * Implements hook_permission().
 */
function access_permission() {
  $perms['administer access schemes'] = array(
    'title' => t('Administer access schemes'),
    'description' => t('Define the means by which objects in the site are divided into access realms.'),
    'restrict access' => TRUE,
  );
  $perms['administer access grants'] = array(
    'title' => t('Administer access grants'),
    'description' => t('Assign roles to users within access realms.'),
    'restrict access' => TRUE,
  );
  return $perms;
}

/**
 * Implements hook_menu().
 */
function access_menu() {
  // Manage access grants.
  $items['admin/access'] = array(
    'title' => 'Access',
    'description' => 'Manage access grants.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('access_overview_grants'),
    'access arguments' => array('administer access grants'),
    // -2 places it between "People" and "Modules" on the default admin menu.
    'weight' => -2,
    'file' => 'access_grants.admin.inc',
  );
  $items['admin/access/list'] = array(
    'title' => 'List',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );
  $items['admin/access/add'] = array(
    'title' => 'Add access grant',
    'page callback' => 'access_grant_add_list',
    'access arguments' => array('administer access grants'),
    'type' => MENU_LOCAL_ACTION,
    'file' => 'access_grants.admin.inc',
  );
  $items['admin/access/add/%access_scheme'] = array(
    'title' => 'Add access grant for scheme',
    'title callback' => 'access_grant_add_page_title',
    'title arguments' => array(3),
    'page callback' => 'access_grant_add',
    'page arguments' => array(3),
    'access arguments' => array('administer access grants'),
    'file' => 'access_grants.admin.inc',
  );
  $items['admin/access/grant/%access_grant'] = array(
    'title callback' => 'access_grant_page_title',
    'title arguments' => array(3),
    'page callback' => 'access_grant_page_view',
    'page arguments' => array(3),
    'access arguments' => array('administer access grants'),
  );
  $items['admin/access/grant/%access_grant/view'] = array(
    'title' => 'View',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );
  $items['admin/access/grant/%access_grant/edit'] = array(
    'title' => 'Edit',
    'page callback' => 'access_grant_edit',
    'page arguments' => array(3),
    'access arguments' => array('administer access grants'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'access_grants.admin.inc',
  );
  $items['admin/access/grant/%access_grant/delete'] = array(
    'title' => 'Delete',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('access_grant_delete_confirm', 3),
    'access arguments' => array('administer access grants'),
    'file' => 'access_grants.admin.inc',
  );

  // Manage access schemes.
  $items['admin/structure/access'] = array(
    'title' => 'Access schemes',
    'description' => 'Define access control schemes.',
    'page callback' => 'access_overview_schemes',
    'access arguments' => array('administer access schemes'),
    'file' => 'access_schemes.admin.inc',
  );
  $items['admin/structure/access/list'] = array(
    'title' => 'List',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );
  $items['admin/structure/access/add'] = array(
    'title' => 'Add access scheme',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('access_scheme_form'),
    'access arguments' => array('administer access schemes'),
    'type' => MENU_LOCAL_ACTION,
    'file' => 'access_schemes.admin.inc',
  );
  $items['admin/structure/access/manage/%access_scheme'] = array(
    'title' => 'Edit access scheme',
    'title callback' => 'access_scheme_page_title',
    'title arguments' => array(4),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('access_scheme_form', 4),
    'access arguments' => array('administer access schemes'),
    'file' => 'access_schemes.admin.inc',
  );
  $items['admin/structure/access/manage/%access_scheme/edit'] = array(
    'title' => 'Edit',
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  $items['admin/structure/access/manage/%access_scheme/delete'] = array(
    'title' => 'Delete',
    'page arguments' => array('access_scheme_delete_confirm', 4),
    'access arguments' => array('administer access schemes'),
    'file' => 'access_schemes.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_hook_info().
 */
function access_hook_info() {
  $group = array('group' => 'access');
  $list = array('access_realm_info', 'access_realms', 'access_realm_settings');
  $hooks = array();
  foreach ($list as $hook) {
    $hooks[$hook] = $group;
  }
  return $hooks;
}
