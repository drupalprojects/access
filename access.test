<?php

/**
 * @file
 * Tests for the access control kit module.
 */

/**
 * Provides common helper methods for access control kit module tests.
 */
class AccessWebTestCase extends DrupalWebTestCase {

  /**
   * Creates and returns a new access scheme with random properties.
   *
   * @return
   *   An access scheme.
   */
  function createScheme() {
    // Create a scheme.
    $scheme = new stdClass();
    $scheme->machine_name = drupal_strtolower($this->randomName());
    $scheme->name = $this->randomName();
    $scheme->realm_type = 'boolean';
    $scheme->description = $this->randomName();
    access_scheme_save($scheme);
    return $scheme;
  }

  /**
   * Creates and returns a new access grant for the given scheme.
   *
   * @param $scheme
   *   An access scheme.
   * @param $rid
   *   (optional) A role ID. If omitted, uses the first available scheme role.
   *   If no role is available, creates one using drupalCreateRole().
   * @param $account
   *   (optional) A user account. If omitted, uses drupalCreateUser().
   *
   * @return
   *   An access grant.
   */
  function createGrant($scheme, $rid = NULL, $account = NULL) {
    if (!isset($rid)) {
      $roles = variable_get('access_scheme_roles_' . $scheme->machine_name, array());
      if (empty($roles)) {
        $rid = $this->drupalCreateRole(array('access content'));
        $role = user_role_load($rid);
        $roles = array($rid => $role->name);
        variable_set('access_scheme_roles_' . $scheme->machine_name, $roles);
      }
      else {
        $rid = key($roles);
      }
    }
    if (!isset($account)) {
      $account = $this->drupalCreateUser(array('access content'));
    }
    $grant = new stdClass();
    $grant->rid = $rid;
    $grant->uid = $account->uid;
    $grant->scheme = $scheme->machine_name;
    access_grant_save($grant);
    return $grant;
  }

}

/**
 * Tests the access scheme interface.
 */
class AccessSchemeInterfaceTest extends AccessWebTestCase {

  protected $admin_user;
  protected $ack_role_rid;

  public static function getInfo() {
    return array(
      'name' => 'Access scheme interface',
      'description' => 'Tests the access scheme admin interface.',
      'group' => 'Access control kit',
    );
  }

  public function setUp() {
    // Enable the access control kit module.
    parent::setUp(array('access'));
    // Create and log in our admin user.
    $this->admin_user = $this->drupalCreateUser(array('administer access schemes'));
    $this->drupalLogin($this->admin_user);
    // Create a user role for use in the access scheme.
    $this->ack_role_rid = $this->drupalCreateRole(array('access content'));
  }

  /**
   * Create and edit an access scheme via the user interface.
   */
  function testSchemeInterface() {
    // Visit the scheme admin overview page.
    $this->drupalGet('admin/structure/access');

    // Create a new scheme through the admin form.
    $this->clickLink(t('Add access scheme'));
    $this->clickLink(t('Boolean'));
    $edit = array();
    $machine_name = drupal_strtolower($this->randomName());
    $edit['machine_name'] = $machine_name;
    $edit['name'] = $this->randomName();
    $edit['description'] = $this->randomName();
    $edit['roles[' . $this->ack_role_rid . ']'] = TRUE;
    $this->drupalPost(NULL, $edit, t('Save access scheme and continue'));
    $this->assertRaw(t('Added access scheme %name.', array('%name' => $edit['name'])), 'Scheme created successfully.');

    // Edit the scheme.
    $this->drupalGet('admin/structure/access');
    $this->assertText(t('@name (Machine name: @machine_name)', array('@name' => $edit['name'], '@machine_name' => $machine_name)), 'Scheme found in the scheme admin overview listing.');
    $this->clickLink(t('edit'));
    $edit = array();
    $edit['name'] = $this->randomName();
    $this->drupalPost(NULL, $edit, t('Save access scheme'));
    $this->assertText(t('@name (Machine name: @machine_name)', array('@name' => $edit['name'], '@machine_name' => $machine_name)), 'Updated scheme found in the scheme admin overview listing.');

    // Try to submit a new scheme with a duplicate human-readable name.
    $edit['machine_name'] = drupal_strtolower($this->randomName());
    $this->drupalPost('admin/structure/access/add/boolean', $edit, t('Save access scheme and continue'));
    $this->assertRaw(t('The name %name is already in use.', array('%name' => $edit['name'])));

    // Try to submit a new scheme with a duplicate machine name.
    $edit['name'] = $this->randomName();
    $edit['machine_name'] = $machine_name;
    $this->drupalPost('admin/structure/access/add/boolean', $edit, t('Save access scheme and continue'));
    $this->assertText(t('The machine-readable name is already in use. It must be unique.'));

    // Try to submit an invalid machine name.
    $edit['machine_name'] = '!&^%';
    $this->drupalPost('admin/structure/access/add/boolean', $edit, t('Save access scheme and continue'));
    $this->assertText(t('The machine-readable name must contain only lowercase letters, numbers, and underscores.'));

    // Ensure that scheme names and descriptions are escaped properly.
    $edit = array();
    $description = '<strong>' . $this->randomName() . '</strong>';
    $edit['machine_name'] = 'don_t_panic';
    $edit['name'] = 'Don\'t Panic & Carry a Towel';
    $edit['description'] = '<script>' . $description . '</script>';
    $this->drupalPost('admin/structure/access/add/boolean', $edit, t('Save access scheme and continue'));
    // Check that the name isn't double-filtered when used as the page title.
    $site_name = variable_get('site_name', 'Drupal');
    $this->assertTitle(t('Don\'t Panic & Carry a Towel | @site-name', array('@site-name' => $site_name)));
    $this->assertNoTitle(t('Don&#039;t Panic &amp; Carry a Towel | @site-name', array('@site-name' => $site_name)));
    // Check that the name is sanitized in overview.
    $this->drupalGet('admin/structure/access');
    $this->assertRaw('Don&#039;t Panic &amp; Carry a Towel');
    $this->assertNoRaw($edit['name']);
    // Check that the description is sanitized in overview.
    $this->assertRaw($description);
    $this->assertNoRaw($edit['description']);
  }

  /**
   * Test the scheme overview with no schemes.
   */
  function testSchemeOverviewEmpty() {
    // Delete all schemes.
    $schemes = access_scheme_load_multiple(FALSE);
    foreach ($schemes as $sid => $scheme) {
      access_scheme_delete($sid);
    }
    // Confirm that no schemes remain in the database.
    $this->assertFalse(access_scheme_load_multiple(FALSE), 'No access schemes found in the database.');
    // Check the default message for no schemes.
    $this->drupalGet('admin/structure/access');
    $this->assertText(t('No access schemes available.'), 'No access schemes were found.');
  }

  /**
   * Delete an access scheme via the user interface.
   */
  function testSchemeDelete() {
    // Create an access scheme.
    $scheme = $this->createScheme();
    $scheme = access_scheme_load($scheme->sid, TRUE);
    $this->assertTrue($scheme, 'Access scheme found in the database.');

    // Create an access grant in the scheme.
    $grant = $this->createGrant($scheme);
    $grant = access_grant_load($grant->gid, TRUE);
    $this->assertTrue($grant, 'Access grant found in the database.');

    // Delete the scheme.
    $edit = array();
    $this->drupalPost('admin/structure/access/' . $scheme->machine_name, $edit, t('Delete access scheme'));
    $this->assertRaw(t('Are you sure you want to delete the access scheme %name?', array('%name' => $scheme->name)), '[confirm deletion] Asks for confirmation.');
    $this->assertRaw(t('All access grants within the scheme will also be deleted. %scheme currently contains 1 access grant on your site. If you remove this scheme, the user may not be able to exercise the permissions assigned by that grant.', array('%scheme' => $scheme->name)), '[confirm deletion] Informs that all grants will be deleted.');
    $this->assertText(t('This action cannot be undone.'), '[confirm deletion] Informs that deletion is permanent.');

    // Confirm deletion.
    $this->drupalPost(NULL, NULL, t('Delete'));
    $this->assertRaw(t('Deleted access scheme %name.', array('%name' => $scheme->name)), 'Access scheme deleted.');
    $this->assertFalse(access_grant_load($grant->gid, TRUE), 'Access grant is not found in the database.');
    $this->assertFalse(access_scheme_load($scheme->sid, TRUE), 'Access scheme is not found in the database.');
  }

}
